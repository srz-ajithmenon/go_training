package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"strconv"
	"userlist-graphql/graph/model"
)

func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &model.User{
		Name:  input.Name,
		ID:    input.ID,
		Email: input.Email,
	}
	r.users = append(r.users, user)
	return user, nil
}

func (r *mutationResolver) UpdateUser(ctx context.Context, id *int, input model.NewUser) (*model.User, error) {

	user := &model.User{Name: input.Name, ID: input.ID, Email: input.Email}
	idval := *id
	for i, val := range r.users {
		if val.ID == strconv.Itoa(idval) {
			r.users[i] = user
		}
	}
	return user, nil

}

func (r *mutationResolver) DeleteUser(ctx context.Context, id *int) ([]*model.User, error) {

	did := *id
	for idx, val := range r.users {
		if val.ID == strconv.Itoa(did) {
			r.users = append(r.users[:idx], r.users[idx+1:]...)
		}
	}
	return r.users, nil

}

func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
